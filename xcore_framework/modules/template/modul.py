# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê XCORE ‚ïê‚ïê
# Copyright (C) 2025, Xeniorn | x404bjrn
# Lizenziert - siehe LICENSE Datei f√ºr Details
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from xcore_framework.config.i18n import i18n
from xcore_framework.core.module_base import XCoreModule


class Module(XCoreModule):
    """
    Repr√§sentiert ein Modul zur dynamischen Konfiguration und Verarbeitung von Parametern.

    Das Modul bietet eine flexible Schnittstelle zur Erfassung, Validierung und Verarbeitung
    von Konfigurationsparametern in verschiedenen Modi wie CLI und GUI. Es vereinfacht die
    dynamische Anpassung von Verhaltensweisen durch unterschiedliche Parameteroptionen,
    wie Texteingabe, Schieberegler und Auswahllisten. Durch die M√∂glichkeit der Fehlerbehandlung
    und R√ºckmeldungen ist es f√ºr eine Vielzahl von Anwendungen geeignet.

    Attributes:
        name: Der Name des Moduls. Wird durch Internationalisierung abgeleitet.
        description: Beschreibung des Moduls, die den Funktionsumfang angibt.
        author: Der Autor des Moduls.
        version: Die aktuelle Moduldarstellungsversion.
        created: Das Erstellungsdatum des Moduls.
        options: Ein W√∂rterbuch, welches die verf√ºgbaren Konfigurationsparameter und
            ihre Eigenschaften wie Typ, Standardwerte und Beschreibungen definiert.
    """

    def __init__(self):
        """
        Repr√§sentiert einen Initialisierungskonstruktor f√ºr eine Klasse, der die
        Basisklasse aufruft.
        """
        super().__init__()

        # Logger initialisieren
        self.init_logging(name=i18n.t("template_modul.modul_name"))

    name = i18n.t("template_modul.modul_name")
    description = i18n.t("template_modul.modul_desc")
    author = "Bj√∂rn H√§usermann | x404bjrn"
    version = "2.0.0"
    created = "28.05.2025"
    options = {
        "example_entry": {
            "widget_type": "entry",
            "required": True,
            "default": "default text",
            "desc": i18n.t("template_modul.modul_option_example_entry_desc"),
        },
        "enable_feature": {
            "widget_type": "checkbox",
            "required": False,
            "default": "False",
            "desc": i18n.t("template_modul.modul_option_enable_feature_desc"),
        },
        "color_choice": {
            "widget_type": "radiobutton",
            "required": False,
            "default": "Blau",
            "values": ["Rot", "Gr√ºn", "Blau"],
            "desc": i18n.t("template_modul.modul_option_color_choice_desc"),
        },
        "security_level": {
            "widget_type": "listbox",
            "required": False,
            "default": "Mittel",
            "values": ["Niedrig", "Mittel", "Hoch"],
            "desc": i18n.t("template_modul.modul_option_security_level_desc"),
        },
        "thread_count": {
            "widget_type": "spinbox",
            "required": False,
            "default": 3,
            "min": 1,
            "max": 10,
            "desc": i18n.t("template_modul.modul_option_thread_count_desc"),
        },
        "size_percentage": {
            "widget_type": "scale",
            "required": False,
            "default": 50,
            "min": 0,
            "max": 100,
            "desc": i18n.t("template_modul.modul_option_size_percentage_desc"),
        },
        "config_path": {
            "widget_type": "fileexplorer",
            "required": False,
            "default": "",
            "desc": i18n.t("template_modul.modul_option_config_path_desc"),
        },
    }

    def run(self, params: dict, mode="cli", gui_console=None) -> dict | None:
        """
        F√ºhrt die Hauptlogik des Moduls aus und setzt Parameter entsprechend den √ºbergebenen
        Einstellungen. Bietet Unterst√ºtzung sowohl f√ºr CLI- als auch f√ºr GUI-Modi.

        Args:
            params (dict): Ein W√∂rterbuch von Parametern, das die Einstellungen f√ºr
                die Modulausf√ºhrung enth√§lt.
            mode (str): Optionale Angabe des Ausf√ºhrungsmodus. Standardm√§√üig "cli".
            gui_console: Optionale GUI-Konsole f√ºr Textausgabe. Standardm√§√üig None.

        Returns:
            dict | None: Gibt ein W√∂rterbuch zur√ºck, das den Erfolg, m√∂gliche Fehlermeldungen,
                Ausgaben und Ergebnisse enth√§lt, oder None, wenn keine Ergebnisse vorliegen.

        Raises:
            Exception: Wenn ein unerwarteter Fehler w√§hrend der Modulausf√ºhrung auftritt.
        """
        # Modul Logging
        self.log("Modul gestartet")

        # Ausf√ºhrungsmodus
        self.mode = mode

        # Textausgabeobjekt des GUI
        self.console_widget = gui_console

        # Modul-√úberschrift / Headline
        self.feedback([i18n.t("template_modul.modul_headline")])

        # Modulhauptroutinen Bereich (Beispielaktion)
        try:
            self.feedback(["üß™ start demo-mode.."])
            for key in self.options:
                # Holen der Parameter-Werte
                val = params.get(key, self.options[key].get("default"))
                self.feedback([f"{key}: {val}"])

        # Fehlerbehandlung
        except Exception as e:
            msg = i18n.t("template_modul.modul_error", error=e)
            self.feedback([msg])

            # Fehler Logging
            self.log(msg, level="error")

            return {"success": False, "error": msg, "output": [msg]}

        # Ergebnis / Abschluss (Modulskript Ende) Bereich
        self.feedback([i18n.t("template_modul.modul_done_message")])
        self.log("Modul wurde ausgef√ºhrt")

        print()
        return {"success": True, "output": self.output, "data": self.results}
