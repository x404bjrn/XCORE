{
  "meta": {
    "name": "Multilingual File Renamer",
    "description": "Ermittelt Verzeichnisinhalte (Python) und benennt sie (Java).",
    "author": "x404bjrn",
    "version": "1.0.0",
    "created": "2025-07-10",
    "category": "template"
  },
  "options": {
    "target_folder": {
      "widget_type": "fileexplorer",
      "required": true,
      "default": "",
      "desc": "Zielverzeichnis für Dateiumbenennung"
    },
    "prefix": {
      "widget_type": "entry",
      "required": false,
      "default": "renamed_",
      "desc": "Präfix für neue Dateinamen"
    }
  },
  "sections": [
    {
      "id": "scan_files",
      "language": "python",
      "description": "Ermittelt alle Dateien im Zielverzeichnis.",
      "code": "import os\n\ndef run(params, state):\n    folder = params['target_folder']\n    files = os.listdir(folder)\n    state['files'] = [f for f in files if os.path.isfile(os.path.join(folder, f))]\n    return state"
    },
    {
      "id": "rename_files",
      "language": "java",
      "description": "Benennt Dateien basierend auf übergebenen Namen um (robust mit Files.move).",
      "code": "import java.io.*;\nimport java.util.*;\nimport java.util.regex.*;\nimport java.nio.file.*;\n\npublic class RenameFiles {\n    public static void main(String[] args) throws Exception {\n        System.out.println(\">>> Java gestartet\");\n\n        String paramFile = args[0];\n        String stateFile = args[1];\n\n        String targetFolder = \"\";\n        String prefix = \"renamed_\";\n        List<String> files = new ArrayList<>();\n\n        // PARAMS LESEN\n        try (BufferedReader br = new BufferedReader(new FileReader(paramFile))) {\n            String line;\n            Pattern targetPattern = Pattern.compile(\"\\\"target_folder\\\"\\\\s*:\\\\s*\\\"(.*?)\\\"\");\n            Pattern prefixPattern = Pattern.compile(\"\\\"prefix\\\"\\\\s*:\\\\s*\\\"(.*?)\\\"\");\n            while ((line = br.readLine()) != null) {\n                Matcher m1 = targetPattern.matcher(line);\n                Matcher m2 = prefixPattern.matcher(line);\n                if (m1.find()) {\n                    targetFolder = m1.group(1);\n                } else if (m2.find()) {\n                    prefix = m2.group(1);\n                }\n            }\n        }\n\n        System.out.println(\"TARGET: \" + targetFolder);\n        File folder = new File(targetFolder);\n        System.out.println(\"Existiert Ordner? \" + folder.exists());\n\n        // STATE LESEN\n        boolean inArray = false;\n        try (BufferedReader br = new BufferedReader(new FileReader(stateFile))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                line = line.trim();\n                if (line.startsWith(\"[\")) inArray = true;\n                else if (line.startsWith(\"]\")) inArray = false;\n                else if (inArray && line.startsWith(\"\\\"\")) {\n                    files.add(line.replace(\",\", \"\").replace(\"\\\"\", \"\"));\n                }\n            }\n        }\n\n        List<String> renamed = new ArrayList<>();\n\n        for (int i = 0; i < files.size(); i++) {\n            String name = files.get(i);\n            File oldFile = new File(targetFolder, name);\n\n            String extension = \"\";\n            int dot = name.lastIndexOf(\".\");\n            if (dot > 0) extension = name.substring(dot);\n\n            File newFile = new File(targetFolder, prefix + i + extension);\n\n            System.out.println(\"Versuche umzubenennen: \" + oldFile.getAbsolutePath() + \" → \" + newFile.getAbsolutePath());\n            if (oldFile.exists()) {\n                try {\n                    Files.move(oldFile.toPath(), newFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n                    System.out.println(\"  Verschoben: OK\");\n                    renamed.add(newFile.getName());\n                } catch (IOException e) {\n                    System.out.println(\"  Fehler beim Verschieben: \" + e.getMessage());\n                }\n            } else {\n                System.out.println(\"  Datei nicht gefunden!\");\n            }\n        }\n\n        try (PrintWriter writer = new PrintWriter(stateFile)) {\n            writer.println(\"{\");\n            writer.println(\"  \\\"renamed_files\\\": [\");\n            for (int i = 0; i < renamed.size(); i++) {\n                writer.print(\"    \\\"\" + renamed.get(i) + \"\\\"\");\n                if (i < renamed.size() - 1) writer.println(\",\");\n                else writer.println();\n            }\n            writer.println(\"  ]\");\n            writer.println(\"}\");\n        }\n\n        System.out.println(\">>> Java beendet\");\n    }\n}"
    }
  ]
}
